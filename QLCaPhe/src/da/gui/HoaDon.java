package da.gui;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

import da.conn.Database;

import java.awt.*;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Vector;

public class HoaDon extends JPanel {
    private JTable tableBillInfo, tableBillDetails;
    private DefaultTableModel modelBillInfo, modelBillDetails;
    private JTextField txtSearch;
    private JButton btnViewDetails, btnRefresh;
    private Connection conn;
    private TableRowSorter<DefaultTableModel> rowSorter;

    public HoaDon() {
        setLayout(new BorderLayout());

        // K·∫øt n·ªëi database
        conn = Database.getConnection();

        // Panel t√¨m ki·∫øm v√† refresh
        JPanel panelTop = new JPanel(new FlowLayout(FlowLayout.LEFT));
        txtSearch = new JTextField(15);
        btnViewDetails = new JButton("Xem chi ti·∫øt");
        btnRefresh = new JButton("L√†m m·ªõi");

        panelTop.add(new JLabel("T√¨m ki·∫øm m√£ h√≥a ƒë∆°n:"));
        panelTop.add(txtSearch);
        panelTop.add(btnViewDetails);
        panelTop.add(btnRefresh);
        add(panelTop, BorderLayout.NORTH);

        // B·∫£ng h√≥a ƒë∆°n (billinfo)
        modelBillInfo = new DefaultTableModel();
        modelBillInfo.setColumnIdentifiers(new String[]{
                "M√£ Hƒê", "Kh√°ch h√†ng", "B√†n", "Nh√¢n vi√™n", "Check-in", "Check-out", "SL", "T·ªïng ti·ªÅn", "Gi·∫£m gi√°"
        });
        tableBillInfo = new JTable(modelBillInfo);
        rowSorter = new TableRowSorter<>(modelBillInfo);
        tableBillInfo.setRowSorter(rowSorter);
        add(new JScrollPane(tableBillInfo), BorderLayout.CENTER);

        // B·∫£ng chi ti·∫øt h√≥a ƒë∆°n (bill)
        modelBillDetails = new DefaultTableModel();
        modelBillDetails.setColumnIdentifiers(new String[]{
                "T√™n m√≥n", "S·ªë l∆∞·ª£ng", "Gi√°", "T·ªïng ti·ªÅn", "Tr·∫°ng th√°i"
        });
        tableBillDetails = new JTable(modelBillDetails);
        add(new JScrollPane(tableBillDetails), BorderLayout.SOUTH);

        // Load d·ªØ li·ªáu
        loadBillInfo();

        // S·ª± ki·ªán t√¨m ki·∫øm m√£ h√≥a ƒë∆°n
        txtSearch.addCaretListener(e -> searchBillInfo());

        // S·ª± ki·ªán xem chi ti·∫øt h√≥a ƒë∆°n
        btnViewDetails.addActionListener(e -> showBillDetails());

        // L√†m m·ªõi danh s√°ch
        btnRefresh.addActionListener(e -> loadBillInfo());
    }

    // üîç H√†m t√¨m ki·∫øm h√≥a ƒë∆°n theo m√£ Hƒê
    private void searchBillInfo() {
        String searchText = txtSearch.getText().trim();
        if (searchText.isEmpty()) {
            rowSorter.setRowFilter(null); // Hi·ªÉn th·ªã t·∫•t c·∫£ n·∫øu kh√¥ng nh·∫≠p g√¨
        } else {
            try {
                rowSorter.setRowFilter(RowFilter.regexFilter("^" + searchText, 0)); // L·ªçc theo c·ªôt "M√£ Hƒê"
            } catch (Exception ignored) {
            }
        }
    }

    // Load danh s√°ch h√≥a ƒë∆°n t·ª´ database
    private void loadBillInfo() {
        modelBillInfo.setRowCount(0); // X√≥a d·ªØ li·ªáu c≈©
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM billinfo")) {

            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm");
            while (rs.next()) {
                Vector<Object> row = new Vector<>();
                row.add(rs.getInt("billInfo_id"));
                row.add(rs.getString("customer_id"));
                row.add(rs.getString("table_id"));
                row.add(rs.getString("employee_id"));
                row.add(rs.getTimestamp("check_in") != null ? sdf.format(rs.getTimestamp("check_in")) : "");
                row.add(rs.getTimestamp("check_out") != null ? sdf.format(rs.getTimestamp("check_out")) : "");
                row.add(rs.getInt("total_quantity"));
                row.add(rs.getInt("total_price"));
                row.add(rs.getInt("discount"));
                modelBillInfo.addRow(row);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Hi·ªÉn th·ªã chi ti·∫øt h√≥a ƒë∆°n theo billInfo_id
    private void showBillDetails() {
        int selectedRow = tableBillInfo.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn h√≥a ƒë∆°n c·∫ßn xem!");
            return;
        }

        int billInfoId = (int) tableBillInfo.getValueAt(selectedRow, 0);
        modelBillDetails.setRowCount(0); // X√≥a d·ªØ li·ªáu c≈©

        try (PreparedStatement ps = conn.prepareStatement("SELECT * FROM bill WHERE billInfo_id = ?")) {
            ps.setInt(1, billInfoId);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                Vector<Object> row = new Vector<>();
                row.add(rs.getString("food_name"));
                row.add(rs.getInt("quantity"));
                row.add(rs.getInt("price"));
                row.add(rs.getInt("total_price"));
                row.add(rs.getString("status"));
                modelBillDetails.addRow(row);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
